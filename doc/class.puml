@startuml

enum AirplaneState {
    Stopped
    AskingPermissionToTakeOff
    TakingOff
    Flying
    AskingPermissionToLand
    Landing
    Crashed
}

class Airplane <<Thread>> {
    uint32_t id
    uint32_t fuel
    uint32_t fuel_consumption_rate
    uint32_t Airport_answer_timeout
    AirplaneState state

    void start_thread()

    void take_off_authorized()
    void take_off_denied()

    void land_authorized()
    void land_denied()
}

note right of Airplane::Airport_answer_timeout
    in case Airport takes too long to answer,
    the scenario where Airplane will ask for
    permission again might be expected!
end note

note right of Airplane::start_thread
    Follow the state machine description
    Decrement fuel using fuel_consumption_rate
end note


enum RunwayState {
    Free
    InUse
}

class Runway {
    uint32_t id
    RunwayState state
}

enum EnumAirportOperation {
    WaitingToTakeOff
    AuthorizedToTakeOff
    WaitingToLand
    AuthorizedToLand
}

class AirportOperation {
    Runway run_way
    Airplane airplane
    uint32_t time_request
    uint32_t time_last_update
    EnumAirportOperation operation_state

    void free_runway()
}


class Airport <<Thread>> {
    list<Runway> lst_runways
    list<AirportOperation> lst_operations

    bool permission_to_take_off(Airplane)
    bool permission_to_land(Airplane)

    void start_thread()
}

note right of Airport::start_thread
    Iterate through lst_operations
        if it matchs the criteria that airplane is already flying
            release runway
            update airplane status and related info

    order lst_operations to update next events
end note


Airplane *-- AirplaneState

Runway *-- RunwayState

AirportOperation *-- EnumAirportOperation
AirportOperation o-- Airplane
AirportOperation o-- Runway

Airport *-- Runway
Airport *-- AirportOperation



@enduml